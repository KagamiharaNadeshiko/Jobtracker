---
description:
globs:
alwaysApply: false
---
# 文件上传安全指南

本项目实现了文件上传功能，本指南提供了相关的安全最佳实践，以确保系统安全运行。

## 核心文件

- 上传中间件: [server/middleware/upload.js](mdc:server/middleware/upload.js)
- 上传控制器: [server/controllers/upload.js](mdc:server/controllers/upload.js)

## 安全最佳实践

1. **文件类型验证**:
   - 使用白名单方式定义允许的文件类型 (`fileFilter`)
   - 同时验证文件扩展名和MIME类型
   - 不要仅依赖客户端验证

2. **文件大小限制**:
   - 设置最大文件大小限制（当前为50MB）
   - 防止通过大文件导致的DOS攻击
   - 在服务器开始处理文件前检查大小

3. **文件存储安全**:
   - 使用随机生成的文件名，避免文件名冲突
   - 不在文件名中保留用户提供的任何信息
   - 将上传目录设置在Web根目录之外（如适用）

4. **路径遍历防护**:
   - 使用`path.join()`安全地构建文件路径
   - 避免直接拼接用户提供的文件名和路径
   - 验证最终路径在预期目录内

5. **文件内容验证**:
   - 考虑实现病毒/恶意软件扫描
   - 对于图片，可添加图像处理库验证文件完整性
   - 移除文件中的潜在元数据

6. **权限控制**:
   - 所有文件上传操作需要用户认证
   - 基于角色/权限的上传访问控制
   - 记录所有文件上传活动的审计日志

7. **服务器配置**:
   - 确保上传目录具有正确的权限设置
   - 禁止对上传目录执行脚本文件
   - 如果可能，使用单独的域或服务来提供上传的文件

## 实施注意事项

1. **Multer 设置**:
   - 使用 `multer.diskStorage` 而不是默认的临时存储
   - 实现自定义的文件名生成逻辑
   - 设置适当的错误处理

2. **错误处理**:
   - 捕获所有与文件上传相关的错误
   - 返回适当的错误消息但不泄露系统信息
   - 在错误情况下清理任何临时文件

3. **前端实现**:
   - 提供文件类型和大小的客户端验证
   - 显示上传进度指示器
   - 实现异常处理和用户友好的错误消息
