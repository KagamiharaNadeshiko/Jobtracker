---
description:
globs:
alwaysApply: false
---
# 用户认证与授权系统

本项目实现了完整的用户认证系统，包括注册、登录、JWT验证和受保护路由。

## 核心文件

- 用户模型: [server/models/User.js](mdc:server/models/User.js)
- 认证控制器: [server/controllers/auth.js](mdc:server/controllers/auth.js)
- 认证中间件: [server/middleware/auth.js](mdc:server/middleware/auth.js)
- 认证路由: [server/routes/auth.js](mdc:server/routes/auth.js)
- 认证上下文: [client/src/context/AuthContext.tsx](mdc:client/src/context/AuthContext.tsx)
- 私有路由组件: [client/src/components/PrivateRoute.tsx](mdc:client/src/components/PrivateRoute.tsx)

## 用户模型

用户模型包含以下字段:
- `username`: 用户名（必需、唯一）
- `email`: 电子邮件（必需、唯一、符合邮箱格式） 
- `password`: 密码（必需、最小长度6字符，存储时加密）
- `avatar`: 头像URL（可选）
- `resetPasswordToken`: 重置密码令牌（可选）
- `resetPasswordExpire`: 重置密码过期时间（可选）

## 认证流程

1. **注册流程**:
   - 用户提供用户名、电子邮箱和密码
   - 验证输入是否有效
   - 检查用户名和邮箱是否已存在
   - 密码加密存储
   - 创建用户并颁发JWT令牌

2. **登录流程**:
   - 用户提供电子邮箱和密码
   - 验证电子邮箱是否存在
   - 验证密码是否匹配
   - 颁发JWT令牌

3. **认证中间件**:
   - 检查请求头或Cookie中是否存在有效token
   - 验证token并解码
   - 将用户数据附加到请求对象

## 前端认证状态

AuthContext提供以下功能:
- `isAuthenticated`: 用户是否已登录
- `user`: 当前用户信息
- `login(email, password)`: 登录功能
- `register(username, email, password)`: 注册功能
- `logout()`: 退出登录功能

## 安全最佳实践

1. 所有密码使用bcrypt加密存储
2. 敏感路由使用JWT认证保护
3. 令牌存储在HttpOnly cookie中
4. 密码字段在查询时默认隐藏
5. 输入验证在前端和后端双重实现
