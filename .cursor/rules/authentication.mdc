---
description:
globs:
alwaysApply: false
---
# 用户认证与授权

本系统采用JWT（JSON Web Token）认证机制，并结合MongoDB Atlas App Services的认证功能。

## 认证流程

1. 用户注册/登录
2. 服务器验证凭据并生成JWT
3. JWT存储在客户端（localStorage/Cookie）
4. 客户端请求时在Authorization头中附加JWT
5. 服务器使用中间件验证JWT并授权访问

## 认证实现

### 服务器端认证

- 用户模型: [server/models/User.js](mdc:server/models/User.js)
- 用户路由: [server/routes/users.js](mdc:server/routes/users.js)
- 认证中间件: [server/middleware/auth.js](mdc:server/middleware/auth.js)

### Atlas App Services认证

- 认证提供者配置: [app_config/auth/providers.json](mdc:app_config/auth/providers.json)
- 认证关联函数: [app_config/functions/getRealmFunctions.js](mdc:app_config/functions/getRealmFunctions.js)

## JWT配置

- 密钥: 环境变量`JWT_SECRET`
- 有效期: 环境变量`JWT_EXPIRE` (默认24小时)
- 负载格式:
  ```json
  {
    "user": {
      "id": "<用户ID>"
    }
  }
  ```

## 密码安全

- 使用bcryptjs进行密码哈希
- 密码存储前自动哈希
- 密码字段在查询时默认不返回

## 权限控制

系统采用基于用户所有权的权限模型:

1. 每个资源（行业、公司、职位等）都有`createdBy`字段
2. 用户只能访问自己创建的资源
3. App Services的同步规则通过`%%user.id`进行匹配
4. Express API通过认证中间件验证用户JWT

## 认证错误处理

- 无效JWT: 返回401错误
- 访问未授权资源: 返回403错误
- 用户不存在: 返回404错误
