---
description: 
globs: 
alwaysApply: false
---
# 测试策略与实现

本项目使用Jest和SuperTest进行服务器端API测试，并支持CI环境的自动化测试。

## 测试配置

测试主配置文件：[__tests__/server.test.js](mdc:__tests__/server.test.js)

## 测试环境设置

测试使用独立的MongoDB实例：
- 本地开发: 使用mongodb://localhost:27017/jobtracing_test
- Github Actions CI: 使用内置MongoDB服务

## 测试用例

### API可用性测试

验证主要API端点是否可访问：
- 行业API: `GET /api/industries`
- 公司API: `GET /api/companies`
- 职位API: `GET /api/positions`

### 数据库连接测试

验证MongoDB连接功能是否正常：
- 连接建立测试
- 错误处理测试
- 连接降级测试

## CI集成

在GitHub Actions中：
1. 自动启动MongoDB服务
2. 设置测试环境变量
3. 执行测试脚本
4. 处理连接关闭

## MongoDB连接降级机制

测试中采用连接降级机制，当遇到DNS解析问题或连接错误时：
1. 尝试标准连接格式
2. 若失败，降级为本地连接
3. 确保测试能继续执行

## 调试辅助功能

包含一系列调试功能：
- 依赖检查日志
- MongoDB连接日志
- 环境变量输出

## 测试命令

运行测试的命令：
```bash
npm test -- __tests__/server.test.js
```
