---
description: 
globs: 
alwaysApply: false
---
# 测试策略与实现

本项目使用Jest和SuperTest进行服务器端API测试，并支持CI环境的自动化测试。

## 远程测试环境

**重要：本项目采用完全远程测试模式，不依赖本地环境调试。**

远程测试环境包括：
1. GitHub Actions CI流水线中的自动化测试
2. MongoDB Atlas云环境中的数据验证
3. App Services Hosting中的集成测试

## 测试配置

测试主配置文件：[__tests__/server.test.js](mdc:__tests__/server.test.js)

## 测试环境设置

测试使用MongoDB实例：
- Github Actions CI: 使用内置MongoDB服务
- 远程测试: 使用Atlas提供的测试沙盒环境

## 测试用例

### API可用性测试

验证主要API端点是否可访问：
- 行业API: `GET /api/industries`
- 公司API: `GET /api/companies`
- 职位API: `GET /api/positions`

### 数据库连接测试

验证MongoDB连接功能是否正常：
- 连接建立测试
- 错误处理测试
- 连接降级测试

## CI集成

在GitHub Actions中：
1. 自动启动MongoDB服务
2. 设置测试环境变量
3. 执行测试脚本
4. 处理连接关闭

## MongoDB连接降级机制

测试中采用连接降级机制，当遇到DNS解析问题或连接错误时：
1. 尝试标准连接格式
2. 若失败，降级为备用连接
3. 确保测试能继续执行

## 远程测试指南

由于项目不进行本地调试，请遵循以下远程测试流程：

1. 所有测试通过GitHub Actions自动触发
2. 使用GitHub提供的在线测试环境
3. 通过GitHub Actions日志查看测试结果
4. 使用MongoDB Atlas的数据浏览器验证测试数据
5. 为复杂场景添加详细的测试日志输出

## 调试辅助功能

包含一系列调试功能：
- 依赖检查日志
- MongoDB连接日志
- 环境变量输出
- 远程日志收集

## 测试命令

在CI流水线中运行测试的命令：
```bash
npm test -- __tests__/server.test.js
```

## 远程测试监控

使用以下方法监控远程测试：
1. GitHub Actions工作流状态页面
2. MongoDB Atlas日志查看器
3. App Services日志控制台
4. 集成第三方监控服务（如Sentry）
