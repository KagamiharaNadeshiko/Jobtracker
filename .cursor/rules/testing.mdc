---
description:
globs:
alwaysApply: false
---
# 测试规范

本项目使用Jest和Supertest进行API和组件测试，确保系统的稳定性和可靠性。

## 核心文件

- API测试: [__tests__/api.test.js](mdc:__tests__/api.test.js)
- 测试配置: [jest.config.js](mdc:jest.config.js)

## 测试类型

1. **API测试**:
   - 测试所有API端点的功能正确性
   - 验证认证与授权逻辑
   - 测试错误处理和边界情况
   - 验证数据库交互

2. **组件测试**:
   - 验证UI组件的渲染和行为
   - 测试用户交互
   - 验证状态更新和副作用

3. **集成测试**:
   - 测试多个组件或服务之间的交互
   - 验证端到端的业务流程

## 测试结构

每个测试文件应当按照以下结构组织:
- 设置测试环境 (beforeAll/beforeEach)
- 按功能分组测试用例 (describe)
- 编写单个测试用例 (test/it)
- 清理测试环境 (afterAll/afterEach)

## 测试覆盖范围

项目的测试应覆盖以下关键功能:
- 用户认证 (注册/登录/退出)
- 行业管理 CRUD 操作
- 公司管理 CRUD 操作
- 职位管理 CRUD 操作
- 文件上传功能
- 数据查询与统计

## 最佳实践

1. **隔离测试**:
   - 使用测试数据库而非生产数据库
   - 测试前清理相关数据
   - 避免测试之间的相互依赖

2. **模拟外部依赖**:
   - 使用mock函数模拟API调用
   - 模拟第三方服务和依赖
   - 控制时间相关的函数行为

3. **断言与验证**:
   - 明确测试的预期结果
   - 验证状态变化和副作用
   - 检查错误处理逻辑

4. **持续集成**:
   - 测试作为CI/CD流程的一部分运行
   - 在代码合并前运行所有测试
   - 监控测试覆盖率指标
