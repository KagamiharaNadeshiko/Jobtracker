---
description:
globs:
alwaysApply: false
---
# 部署与CI/CD指南

本项目使用GitHub Actions自动化构建、测试和部署流程，实现完全自动化的MongoDB Atlas与App Services部署。

## CI/CD配置

CI/CD配置文件: [.github/workflows/ci.yml](mdc:.github/workflows/ci.yml)

工作流程包括:
1. 代码检出
2. Node.js环境设置
3. MongoDB实例启动（用于测试）
4. 依赖安装与测试
5. MongoDB Atlas资源自动创建
   - Atlas集群创建（如不存在）
   - 数据库用户配置
   - Atlas App Services应用创建
6. 前端构建
   - 构建React应用
   - 生成优化的静态文件
7. 后端函数部署
   - 部署到Atlas App Services
8. 前端部署
   - 部署到Atlas App Services Hosting

## MongoDB连接脚本

为提高连接稳定性，系统使用MongoDB连接准备脚本: 
[.github/scripts/prepare_mongo.js](mdc:.github/scripts/prepare_mongo.js)

此脚本能够:
- 处理SRV格式DNS解析问题
- 提供连接降级机制
- 支持CI环境连接本地MongoDB实例

## GitHub Secrets配置

在GitHub仓库设置中需要添加以下Secrets:
- `ATLAS_ORG_ID`: MongoDB Atlas组织ID
- `ATLAS_PROJECT_ID`: MongoDB Atlas项目ID
- `ATLAS_PUBLIC_API_KEY`: Atlas API公钥
- `ATLAS_PRIVATE_API_KEY`: Atlas API私钥
- `MONGO_USERNAME`: 数据库用户名
- `MONGO_PASSWORD`: 数据库密码
- `JWT_SECRET`: JWT密钥

## 自动化部署流程

1. 推送到master/main分支
2. GitHub Actions自动触发CI/CD流水线
3. 自动创建/配置所有MongoDB Atlas资源
4. 构建和部署前后端代码
5. 部署完成后，应用可通过以下URL访问：`https://<app-id>.services.cloud.mongodb.com`

## 环境变量

部署需要以下环境变量:

- `NODE_ENV`: 运行环境 (development, production, test)
- `PORT`: 服务器端口
- `MONGO_URI`: MongoDB连接字符串
- `REALM_APP_ID`: Atlas App Services应用ID
