---
description:
globs:
alwaysApply: false
---
# 性能优化指南

本项目采用了多项性能优化策略，以确保系统在处理用户请求、数据存储和文件上传时保持高效运行。

## 核心文件

- 服务器入口: [server.js](mdc:server.js)
- 数据库配置: [server/config/db.js](mdc:server/config/db.js)
- 仪表盘页面: [client/src/pages/Dashboard.tsx](mdc:client/src/pages/Dashboard.tsx)

## 后端优化策略

1. **数据库查询优化**:
   - 使用适当的索引提高查询速度
   - 限制返回字段，只获取所需数据
   - 使用Mongoose预填充(populate)减少多次查询
   - 实现分页，避免一次加载过多数据

2. **API响应优化**:
   - 使用适当的HTTP缓存头
   - 压缩响应数据 (使用compression中间件)
   - 实现限速机制，防止API滥用
   - JSON响应最小化，移除不必要字段

3. **文件处理优化**:
   - 使用流式处理大文件
   - 限制上传文件大小，避免服务器过载
   - 异步处理文件上传，不阻塞主线程
   - 考虑使用CDN分发静态文件和上传的内容

4. **服务器配置**:
   - 适当设置Node.js内存限制
   - 使用集群模式提高多核CPU利用率
   - 实现健壮的错误处理，避免服务中断
   - 定期清理临时文件和日志

## 前端优化策略

1. **React性能优化**:
   - 使用React.memo避免不必要的重渲染
   - 实现虚拟列表处理大量数据
   - 懒加载组件和路由
   - 优化状态管理，避免冗余更新

2. **数据获取**:
   - 实现数据缓存机制
   - 使用批量请求减少API调用次数
   - 实现乐观UI更新，提升用户体验
   - 适当使用数据预取

3. **图表与可视化**:
   - 延迟加载图表库
   - 优化大量数据的展示方式
   - 使用canvas而非DOM渲染复杂图表
   - 数据聚合，避免渲染过多数据点

4. **资源优化**:
   - 代码分割减小包体积
   - 优化和压缩图片资源
   - 使用现代格式(如WebP)减小图片大小
   - CSS优化和减少不必要的样式

## 监控与改进

1. **性能监控**:
   - 实现API响应时间统计
   - 监控服务器资源使用情况
   - 跟踪前端加载和交互性能
   - 设置性能指标阈值告警

2. **持续优化**:
   - 定期审查性能瓶颈
   - 分析用户访问模式优化常用功能
   - 根据监控数据调整资源分配
   - 更新技术栈以采用更高效的方法
