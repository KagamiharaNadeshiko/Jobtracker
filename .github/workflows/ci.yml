name: Node.js & React CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        mongodb-version: [5.0]

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Start MongoDB
      uses: supercharge/mongodb-github-action@1.8.0
      with:
        mongodb-version: ${{ matrix.mongodb-version }}

    - name: Create .env file
      run: |
        echo "NODE_ENV=test" > .env
        echo "MONGO_URI=mongodb://localhost:27017/jobtracing_test" >> .env
        echo "PORT=5000" >> .env
        echo "JWT_SECRET=test_secret" >> .env
        echo "JWT_EXPIRE=1d" >> .env

    - name: Install server dependencies
      run: npm install

    - name: Install express-validator
      run: npm install express-validator@7.0.1

    - name: Install frontend dependencies
      run: |
        cd client
        npm install --legacy-peer-deps
        npm install react@18.2.0 react-dom@18.2.0 --legacy-peer-deps
        npm install ajv@8.12.0 ajv-keywords@5.1.0 --legacy-peer-deps

    - name: Set up MongoDB connection
      run: node .github/scripts/prepare_mongo.js
      env:
        CI: true
        MONGO_URI: mongodb://localhost:27017/jobtracing_test

    - name: Run backend tests
      run: npm test -- __tests__/server.test.js
      env:
        CI: true
        MONGO_URI: mongodb://localhost:27017/jobtracing_test

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18.x

    # 安装MongoDB Atlas CLI
    - name: Install MongoDB Atlas CLI
      run: |
        curl -fsSL https://mongodb-js.github.io/mongosh/mongodb-atlas-cli.asc | sudo gpg --dearmor -o /usr/share/keyrings/mongodb-atlas.gpg
        echo "deb [signed-by=/usr/share/keyrings/mongodb-atlas.gpg] https://mongodb-js.github.io/mongosh/apt stable main" | sudo tee /etc/apt/sources.list.d/mongodb-atlas.list
        sudo apt-get update
        sudo apt-get install -y mongodb-atlas

    # 安装所有依赖，包括express-validator
    - name: Install dependencies
      run: |
        npm install
        npm install express-validator@7.0.1

    # 配置Atlas CLI
    - name: Login to MongoDB Atlas
      run: |
        atlas auth login-with-api-key --private-api-key ${{ secrets.ATLAS_PRIVATE_API_KEY }} --public-api-key ${{ secrets.ATLAS_PUBLIC_API_KEY }}
        atlas config set org_id ${{ secrets.ATLAS_ORG_ID }} --force
        atlas config set project_id ${{ secrets.ATLAS_PROJECT_ID }} --force

    # 检查并创建MongoDB集群
    - name: Create MongoDB Atlas Cluster (if not exists)
      run: |
        if ! atlas clusters list --output json | grep -q "jobtracing-cluster"; then
          echo "Creating new MongoDB Atlas cluster..."
          atlas clusters create jobtracing-cluster --provider AWS --region US_EAST_1 --tier M0 --diskSizeGB 2 --backup false
          
          echo "Waiting for cluster to be ready..."
          atlas clusters watch jobtracing-cluster
        else
          echo "MongoDB cluster already exists, skipping creation."
        fi

    # 配置数据库用户和网络访问
    - name: Configure Database Access
      run: |
        if ! atlas dbusers list --output json | grep -q "${{ secrets.MONGO_USERNAME }}"; then
          echo "Creating database user..."
          atlas dbusers create --username ${{ secrets.MONGO_USERNAME }} --password ${{ secrets.MONGO_PASSWORD }} --role readWriteAnyDatabase
        else
          echo "Database user already exists, skipping creation."
        fi
        
        echo "Adding global IP access..."
        atlas accessList create --cidr 0.0.0.0/0 --comment "Allow access from anywhere" || true

    # 获取集群主机地址（非SRV格式，避免DNS问题）
    - name: Get MongoDB Cluster Hosts
      id: mongo_hosts
      run: |
        CLUSTER_INFO=$(atlas clusters describe jobtracing-cluster --output json)
        CLUSTER_HOST=$(echo $CLUSTER_INFO | jq -r '.connectionStrings.standard' | sed 's|mongodb://||' | sed 's|/.*||')
        echo "ATLAS_CLUSTER_HOST=$CLUSTER_HOST" >> $GITHUB_ENV
        echo "Found cluster host: $CLUSTER_HOST"

    # 获取连接字符串
    - name: Get MongoDB Connection String
      id: mongo_uri
      run: |
        # 优先使用标准连接字符串而非SRV格式
        CONNECTION_STRING=$(atlas clusters connectionString jobtracing-cluster --username ${{ secrets.MONGO_USERNAME }} --password ${{ secrets.MONGO_PASSWORD }} --type standard)
        echo "connection_string=$CONNECTION_STRING" >> $GITHUB_ENV

    # 检查并创建Atlas App Services应用
    - name: Create Atlas App Services App (if not exists)
      run: |
        if ! atlas apps list --output json | grep -q "jobtracing-app"; then
          echo "Creating new Atlas App Services application..."
          atlas apps create jobtracing-app --cluster jobtracing-cluster
          
          APP_ID=$(atlas apps list --output json | jq -r '.[] | select(.name=="jobtracing-app") | .client_app_id')
          echo "REALM_APP_ID=$APP_ID" >> $GITHUB_ENV
          
          echo "Enabling authentication providers..."
          atlas apps auth-providers create --type email-password --app-id $APP_ID
        else
          APP_ID=$(atlas apps list --output json | jq -r '.[] | select(.name=="jobtracing-app") | .client_app_id')
          echo "REALM_APP_ID=$APP_ID" >> $GITHUB_ENV
          echo "Atlas App Services application already exists, using ID: $APP_ID"
        fi

    # 获取应用的域名
    - name: Get App Services Domain
      run: |
        APP_DOMAIN=$(atlas apps describe --app-id ${{ env.REALM_APP_ID }} --output json | jq -r '.domain')
        echo "APP_DOMAIN=$APP_DOMAIN" >> $GITHUB_ENV

    - name: Create production .env file
      run: |
        echo "NODE_ENV=production" > .env
        echo "MONGO_URI=${{ env.connection_string }}" >> .env
        echo "PORT=8080" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "JWT_EXPIRE=30d" >> .env
        echo "REALM_APP_ID=${{ env.REALM_APP_ID }}" >> .env

    - name: Create client .env file
      run: |
        echo "REACT_APP_REALM_APP_ID=${{ env.REALM_APP_ID }}" > client/.env
        echo "REACT_APP_API_URL=https://${{ env.APP_DOMAIN }}/api" >> client/.env

    - name: Install dependencies
      run: npm install

    - name: Build frontend
      run: |
        cd client
        npm install --legacy-peer-deps
        npm run build
      env:
        CI: true
        TSC_COMPILE_ON_ERROR: true
        SKIP_PREFLIGHT_CHECK: true
    
    # 准备App Services配置
    - name: Configure App Services
      run: |
        mkdir -p app_config/hosting
        
        # 复制前端构建文件到hosting目录
        cp -R client/build/* app_config/hosting/
        
        # 给部署准备脚本添加执行权限
        if [ -f app_config/prepare_deployment.sh ]; then
          chmod +x app_config/prepare_deployment.sh
          cd app_config && ./prepare_deployment.sh ${{ env.REALM_APP_ID }}
        else
          echo "部署准备脚本不存在，继续部署流程..."
        fi

    # 部署到Atlas App Services
    - name: Deploy to Atlas App Services
      run: |
        cd app_config
        # 导出配置到Atlas App Services 
        echo "Deploying configuration and functions to Atlas App Services..."
        atlas apps deploy --app-id ${{ env.REALM_APP_ID }} --local . --include-package-json
        
        # 部署前端静态文件
        echo "Deploying frontend static files to hosting..."
        atlas apps hosting assets upload --app-id ${{ env.REALM_APP_ID }} --path hosting --include "**/*" --overwrite
        
        echo "Deployment to MongoDB Atlas App Services completed successfully!"
        echo "Your application is now available at: https://${{ env.APP_DOMAIN }}" 